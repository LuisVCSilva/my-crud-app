#DO NOT EDIT THIS FILE
import json
from sympy import ask, sympify, latex
from sympy import Q as question_query
from sympy.abc import _clash1
from sympy.abc import *
from flask import Blueprint, request
from .utils.numbers_predicate import attrs
is_odd = Blueprint('is_odd', __name__)

class Is_odd:
   def __init__ (self):
      self.functions = [show_is_odd]
      self.text = ""
  
   @staticmethod
   def show_is_odd(func):
      func = sympify(func)
      result = []
      aux = ask(question_query.odd(func))
      if aux==True:
         result = ["$$" + latex(str(func)) + " \\text{ is odd}$$"]
      elif aux==False:
         result = ["$$" + latex(str(func)) + " \\text{ is not odd}$$"]
      else:
         for attr in attrs:
            if attr!=question_query.odd(x):
               if ask(question_query.odd(func),attr)==True:             
                  result.append("$$" + latex(func) + "\\text{ is odd given that x is " + str(attr).replace("Q.","")[:-3] + "}$$")
         result = result if result!=[] else ["$$\\text{It's not possible to say that }" + latex(func) + " \\text{is odd or not}$$"]
      return result

   @is_odd.route('/apps/is_odd',methods=["GET"])
   def run():
      expression = request.args["input"]
      givens = expression.split("if")[1:].split("and")
      return json.dumps({"list":(Is_odd.show_is_odd(expression))})#Is_odd.show_is_odd(expression)   

   @is_odd.route('/apps/is_odd/help',methods=["GET"])
   def help():
      return json.dumps({"text":"is odd help page"}) 

   is_odd_method = {'function_name':show_is_odd,'keywords':['is_odd']}
      

